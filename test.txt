

<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<title>Drosophila brain demo</title>
		<style>
			html, body {
				height: 100%;
			}

			body {
				background-color: #000000;
				margin: 0;
				font-family: Arial;
				overflow: hidden;
			}

			a {
				color: #ffffff;
			}

		</style>

		
		<script type="x-shader/x-vertex" id="vertexshader">

			attribute float size;
			attribute vec3 customColor;

			varying vec3 vColor;

		
			
			void main() {

				vColor = customColor;
				vColor = vec3(255,0,0);
				vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );

				//gl_PointSize = 5.0  + mvPosition.z*300.0;
				//if(gl_PointSize <= 5.0)gl_PointSize = 5.0;
				//gl_PointSize = 10.0;
				
				
				gl_Position = projectionMatrix * mvPosition;

			}

		</script>

		<script type="x-shader/x-fragment" id="fragmentshader">

			uniform vec3 color;
			uniform sampler2D texture;

			varying vec3 vColor;

			
			
			void main() {

				gl_FragColor = vec4( color * vColor, 1.0 );

				gl_FragColor = gl_FragColor * texture2D( texture, gl_PointCoord );
				
				if ( gl_FragColor.a < ALPHATEST ){
					discard;
				} 

			}

		</script>
		<script src="build/three.js"></script>
	</head>
	<body>

		<script src="build/three.js"></script>
		<script src="js/tween.min.js"></script>
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
		
		<script src="js/controls/OrbitControls.js"></script>
		<script src="js/loaders/OBJLoader.js"></script>  
		<script src="js/loaders/MTLLoader.js"></script> 

	
		<script src="js/renderers/Projector.js"></script>
		<script src="js/renderers/CanvasRenderer.js"></script>

		<script src="js/libs/stats.min.js"></script>
		<script src="js/libs/dat.gui.min.js"></script>
		<div id="container"></div>
		<script>

			var camera, scene, renderer;
			var stats;
			var BackMaterial = [], FrontMaterial = [],Materialnum = 0;
			var controls;
			var particle = {}, group = {}, exist = {};
			var objects = [];

			var params = {
				opacity: 0.3,
				exposure: 1.0,
				show_point: true
			};

			var lineMaterial = new THREE.LineBasicMaterial( {
                color: 0xffffff,
                opacity: 0.8,
                transparent: true,
                linewidth: 1.5,
                vertexColors: THREE.VertexColors,
                blending: THREE.NormalBlending,
            } );
            var parent;

            var fileParams = {};
			var gui;

			init();
			animate();

			function init() {

				camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 5000 );
				camera.position.z = 700;

				scene = new THREE.Scene();
				
				scene.add( new THREE.AmbientLight( 0x222222 ) );
				
				var dirLight = new THREE.DirectionalLight( 0xffffff, 1 );
				dirLight.color.setRGB( 1, 1, 1 );
				dirLight.position.set( 0, 1.75, 1 );
				dirLight.position.multiplyScalar( 50 );
				scene.add( dirLight );

				var dirLight2 = new THREE.DirectionalLight( 0xffffff, 1 );
				dirLight2.color.setRGB( 1, 1, 1 );
				dirLight2.position.set( 0, 1.75, -1 );
				dirLight2.position.multiplyScalar( 50 );
				scene.add( dirLight2 );

				var dirLight3 = new THREE.DirectionalLight( 0xffffff, 1 );
				dirLight3.color.setRGB( 1, 1, 1 );
				dirLight3.position.set( 0, -1.75, 1 );
				dirLight3.position.multiplyScalar( 50 );
				scene.add( dirLight3 );

				var dirLight4 = new THREE.DirectionalLight( 0xffffff, 1 );
				dirLight4.color.setRGB( 1, 1, 1 );
				dirLight4.position.set( 0, -1.75, -1 );
				dirLight4.position.multiplyScalar( 50 );
				scene.add( dirLight4 );
				
				
				//-------------------brain drawing--------------------------------------------------------

				readFiles();





				renderer = new THREE.WebGLRenderer( { antialias: true , alpha: true} );
				renderer.setClearColor( new THREE.Color( 0x000000 ) );
				renderer.setSize( window.innerWidth, window.innerHeight );
				renderer.domElement.style.position = 'absolute';
				renderer.domElement.style.top = 0;
				renderer.toneMappingExposure = 1;
				renderer.gammaInput = true;
				renderer.gammaOutput = true;


				document.getElementById( 'container' ).appendChild( renderer.domElement );
				
				stats = new Stats();
				document.getElementById( 'container' ).appendChild( stats.dom );

				controls = new THREE.OrbitControls( camera, renderer.domElement );
				controls.enableDamping = true;
				controls.dampingFactor = 0.25;
				controls.rotateSpeed = 0.35;
				controls.addEventListener( 'change', render );

				window.addEventListener( 'resize', onWindowResize, false );

				gui = new dat.GUI();
				var f1 = gui.addFolder('Basic control');
				f1.add( params, 'exposure', 0, 3 );
				f1.add( params, 'opacity', 0, 1 );
				f1.add( params, 'show_point');
				f1.open();

				gui.open();
			}

			function UrlExists(url)
			{
				var http = new XMLHttpRequest();
				http.open('HEAD', url, false);
				http.send();
				return http.status!=404;
			}

			function objWriter(fileName,color){

				BackMaterial.push(new THREE.MeshPhysicalMaterial( {
					map: null,
					color: color,
					metalness: 1.0,
					roughness: 1.0,
					opacity: 0.5,
					side: THREE.BackSide,
					transparent: true,
					shading: THREE.SmoothShading,
					envMapIntensity: 1,
					premultipliedAlpha: true
					// TODO: Add custom blend mode that modulates background color by this materials color.
				} ));

				FrontMaterial.push(new THREE.MeshPhysicalMaterial( {
					map: null,
					color: color,
					metalness: 1.0,
					roughness: 1.0,
					opacity: .5,
					side: THREE.FrontSide,
					transparent: true,
					shading: THREE.SmoothShading,
					envMapIntensity: 1,
					premultipliedAlpha: true
				} ));

				var num = Materialnum++;

				FrontMaterial[num].needsUpdate = BackMaterial[num].needsUpdate = true;

				var objLoader = new THREE.OBJLoader();
				objLoader.load( fileName, function ( object ) {

					object.traverse( function ( child ) {
						//var simplified = modifer.modify( child, child.vertices.length * 0.5 | 0 );
						if ( child instanceof THREE.Mesh ) {

							child.material = BackMaterial[num];
							var second = child.clone();
							second.material = FrontMaterial[num];

							parent = new THREE.Group();
							parent.add( second );
							parent.add( child );
							scene.add( parent );

							objects.push( parent );
						}
					});

				});

			}

			function readFiles(){

				$.getJSON('sets/filelistlight.json','parameters/data',function(result) {

                    var fileNames = result.filename;
					var f2 = gui.addFolder('Files');
                    var f;
					for (f = 0; f < fileNames.length; f++) {
						if( !UrlExists('sets/' + fileNames[f]))continue;

						fileParams[fileNames[f]] = false;//set file control
						f2.add(fileParams,fileNames[f]);
                        exist[fileNames[f]] = false;

                        setParticles(fileNames[f]);
					}
					f2.open();
					objWriter('brain.obj',0x000021);
					objWriter('obj/ebo_al_3_instd_l_ascii.obj',0x210000);


				});
			}


			function setParticles(fileName){
			    window.fileName = fileName;

                $.ajax({
                    url: 'sets/' + fileName,
					fileName: fileName,
                    success: function(data) {
						dataLink(data, this.fileName);

						function dataLink(data, fileName) {
							 console.log(fileName);
							var geometry = new THREE.Geometry();
							group = new THREE.Group();
							var lines = data.split('\n');
							var state = 0;

							var cmp_data = {
								data_map: {},
								used_map: {}
							};
							var vertices = [];

							for (var i = 0; i < lines.length; i++) {
								//console.log(lines[i]);
								if (state == 0 && lines[i] == "@1")state = 1;
								else if (state == 1 && lines[i] == "@2")state = 2;
								else if (state == 1) {
									var point = lines[i].split(' ');
									//console.log("x = "+point[0]+", y = "+point[1]+"z = "+point[2]);

									var vertex = new THREE.Vector3();
									vertex.x = point[0];
									vertex.y = point[1];
									vertex.z = point[2];
									vertices.push(vertex);
								}
								else if (state == 2) {
									var point = lines[i].split(' ');
									add_value(cmp_data, point[0], point[1]);
								}
							}

							var newDataSet = BFSSort(cmp_data);


							for(var i = 0;i<newDataSet.length;i++){

								var lineGeometry = new THREE.Geometry();
								if(newDataSet[i].length>10)
									//console.log(newDataSet[i].length);

								//進行點簡化
								var vert = {
									k: 0,
									vec0: null,
									vec1: null,
									vec2: null
								};
								var points = [];

								for(var j = 0;j<newDataSet[i].length;j++){
									var vertex = new THREE.Vector3();
									vertex = vertices[newDataSet[i][j]];
									if(j == newDataSet[i].length - 1 || is_pass(vert,vertex)) {
										//lineGeometry.vertices.push(vertex);
										//lineGeometry.colors.push(new THREE.Color(0xff0000));
										geometry.vertices.push(vertex);
										points.push(vertex);
									}
								}
								if(vert) vert.k = 0;
								//console.log(lineGeometry.vertices.length+" "+newDataSet[i].length);
								var spline = new THREE.Spline(points);

								for(var j = 0;j <= points.length * 3;j++){
									var idx = j / (points.length*3);
									var position = spline.getPoint( idx );
									var vec = new THREE.Vector3(position.x,position.y,position.z);
									//console.log(vec);
									lineGeometry.vertices.push(vec);
									lineGeometry.colors.push(new THREE.Color(0xff0000));
								}

								var line = new THREE.Line(lineGeometry, lineMaterial);
								line.scale.x = line.scale.y = line.scale.z = 1;
								line.position.x = 0;
								line.position.y = 0;
								line.position.z = 0;

								group.add(line);
							}

							particle = new THREE.Points(geometry, new THREE.PointsMaterial({
								transparent: true,
								opacity: 0.8,
								blending: "MultiplyBlending",
								color: 0xff0000,
								size: 1,
							}));

							particle.name = "_p"+fileName;
							particle.visible = false;
							group.name = "_g"+fileName;
							group.visible = false;

							scene.add(particle);
							scene.add(group);

							console.log("done " + geometry.vertices.length);

						}

						function is_pass(vert,vertex){

							if(!vert){
								vert= {
									k: 0,
									vec0: null,
									vec1: null,
									vec2: null
								};
							}

							if(vert.k == 0){
								vert.k++;
								vert.vec0 = vertex;
								return true;
							}else if(vert.k == 1){
								vert.k++;
								vert.vec1 = vertex;
								return true;
							}else{
								vert.vec2 = vertex;
								var x0 = new THREE.Vector3(vert.vec1.x-vert.vec0.x,vert.vec1.y-vert.vec0.y,vert.vec1.z-vert.vec0.z);
								var x1 = new THREE.Vector3(vert.vec1.x-vert.vec2.x,vert.vec1.y-vert.vec2.y,vert.vec1.z-vert.vec2.z);

								vert.vec0 = vert.vec1;
								vert.vec1 = vert.vec2;

								var ang = x0.angleTo(x1);
								delete x0;
								delete x1;

								if(ang >2) {

									return true;
								}
								else return false;
							}

						}

						function add_value(cmp_data, p0, p1)//add new data_set(p0,p1) into cmp_data
						{
							if(!cmp_data.data_map[p0]){
								cmp_data.data_map[p0] = [];
								cmp_data.used_map[p0] = 0;
							}
							if(!cmp_data.data_map[p1]){
								cmp_data.data_map[p1] = [];
								cmp_data.used_map[p1] = 0;
							}
							cmp_data.data_map[p0].push(p1);
							cmp_data.data_map[p1].push(p0);
							cmp_data.used_map[p0]++;
							cmp_data.used_map[p1]++;
						}

						function remove_value(cmp_data, p0, p1)//remove data_set(p0,p1)
						{
							var index;
							if(cmp_data.data_map[p0]) {
								index = cmp_data.data_map[p0].indexOf(p1);
								if (index > -1) {
									cmp_data.data_map[p0].splice(index, 1);
								}
							}
							if(cmp_data.data_map[p1]) {
								index = cmp_data.data_map[p1].indexOf(p0);
								if (index > -1) {
									cmp_data.data_map[p1].splice(index, 1);
								}
							}
						}

						function BFSSort(cmp_data){ //detect all line segment
							var line_seg = [];
							var queue = [];

							for(var p in cmp_data.used_map){
								if(cmp_data.used_map[p] == 1) {
									queue.push(p);
									line_seg.push([p]);
									break;
								}
							}

							var seg_num = 0;
							while(queue.length>0){
								var head = queue.shift();
								cmp_data.used_map[head]--;

								var next_point = cmp_data.data_map[head].pop();
								remove_value(cmp_data,head,next_point);

								var now_point = next_point;
								cmp_data.used_map[now_point]--;

								while(cmp_data.used_map[now_point] == 1){//直到走到分岔點
									line_seg[seg_num].push(now_point);
									next_point = cmp_data.data_map[now_point].pop();
									remove_value(cmp_data,now_point,next_point);
									now_point = next_point;
									cmp_data.used_map[now_point]--;
								}

								line_seg[seg_num].push(now_point);
								remove_value(cmp_data,now_point,next_point);

								for(var p in cmp_data.data_map[now_point]){
									queue.push(now_point);
									line_seg.push([now_point]);
								}
								seg_num++;
							}
							console.log("seg_num: "+seg_num);

							return line_seg;
						}
					}

                });
            }

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			function animate() {

				requestAnimationFrame( animate );
				stats.begin();
				TWEEN.update();
				controls.update();
				render();
				stats.end();
			}

			function render() {
				renderer.toneMappingExposure = params.exposure;

				for(var i = 0;i<Materialnum;i++) {
					BackMaterial[i].opacity = params.opacity;
					FrontMaterial[i].opacity = params.opacity;
				}
                //var selectedObject = scene.getObjectByName("test");
               //scene.remove(selectedObject);
				for(var key in fileParams){
					//console.log(key);

					if(fileParams[key] && params.show_point && scene.getObjectByName("_p"+key).visible ==false){
						scene.getObjectByName("_p"+key).visible = true;
					}else if(fileParams[key] && !params.show_point && scene.getObjectByName("_p"+key).visible ==true){
						scene.getObjectByName("_p"+key).visible = false;
					}

					if(fileParams[key] && !exist[key]){
						exist[key] = true;
						scene.getObjectByName("_g"+key).visible = true;
					}
					else if(!fileParams[key] && exist[key]){
						exist[key] = false;
	                    scene.getObjectByName("_p"+key).visible = false;
						scene.getObjectByName("_g"+key).visible = false;
					}
				}

				renderer.render( scene, camera );

			}

		</script>
	</body>
</html>
